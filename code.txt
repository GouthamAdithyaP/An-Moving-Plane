#include<windows.h>
#include <stdlib.h>
#include <stdio.h>
#ifndef WIN32
#include <unistd.h>
#else
#define random rand
#define srandom srand
#endif
#include <math.h>
#include <GL/glut.h>
/* Some <math.h> files do not define M_PI... */
#ifndef M_PI
#define M_PI 3.14159265
#endif
#ifndef M_PI_2
#define M_PI_2 1.57079632
#endif
float ii = 0.0;
int color = 0;
GLboolean moving = GL_FALSE;
#define MAX_PLANES 15
struct
{
    float speed;          /* zero speed means not flying */
    GLfloat red, green, blue;
    float theta;
    float x, y, z, angle;
} planes[MAX_PLANES];
int blade=0;
#define v3f glVertex3f  /* v3f was the short IRIS GL name for glVertex3f */
void sphere(float r, float g, float b, float a)
{
	glColor4f(r,g,b,a);
	glutSolidSphere(4,32,32);
}
//Wings
void wing(int Colour)
{
	float rs=0; //Side red
	float re=0;	//Edge red
	float bs=0;	//Side blue
	float be=0;	//Edge blue
	float gs=0;	//Side green
	float ge=0;	//Edge green
    if (Colour == 1){
	rs = 0.75;
	re = 0.5;
	} else if (Colour == 2){
	gs = 0.75;
	ge = 0.5;
	} else if (Colour == 3){
	bs = 0.75;
	be = 0.5;
	}
    //Front
	glBegin(GL_POLYGON);
    glColor3f(1.0,1.0,1.0);
    glVertex3f(1.5,-1,10);
    glVertex3f(25,-0.25,0);
    glVertex3f(25,0.25,0);
    glVertex3f(1.5,1,10);
    glColor3f(1.0,0.0,0.0);
	glEnd();
    //Back
	glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,0.0);
    glVertex3f(1.5,1,-1);
    glVertex3f(25,0.25,-7);
    glVertex3f(25,-0.25,-7);
    glVertex3f(1.5,-1,-1);
	glEnd();
    //Top
	glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    glVertex3f(1.5,1,10);
    glVertex3f(25,0.25,0);
    glVertex3f(25,0.25,-7);
    glVertex3f(1.5,1,-1);
	glEnd();
    //Bottom
	glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    glVertex3f(1.5,-1,-1);
    glVertex3f(25,-0.25,-7);
    glVertex3f(25,-0.25,0);
    glVertex3f(1.5,-1,10);
	glEnd();
    //End
	glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,0.0);
    glVertex3f(25,-0.25,0);
    glVertex3f(25,-0.25,-7);
    glVertex3f(25,0.25,-7);
    glVertex3f(25,0.25,0);
	glEnd();
}
//Fin
void fin(int Colour)
{
	float rs=0;
	float re=0;
	float bs=0;
	float be=0;
	float gs=0;
	float ge=0;

	if (Colour == 1){
	rs = 0.75;
	re = 0.5;
	} else if (Colour == 2){
	gs = 0.75;
	ge = 0.5;
	} else if (Colour == 3){
	bs = 0.75;
	be = 0.5;
	}
    //Front
	glBegin(GL_POLYGON);
    glColor3f(re,ge,be);
    glVertex3f(-0.5,2,-7);
    glVertex3f(0.5,2,-7);
    glVertex3f(0,9.5,-10);
	glEnd();
    //Back
    glBegin(GL_POLYGON);
    glColor3f(re,ge,be);
    glVertex3f(0,9.5,-12);
    glVertex3f(0.5,2,-11);
    glVertex3f(-0.5,2,-11);
	glEnd();
    //Side A
	glBegin(GL_POLYGON);
    glColor3f(rs,gs,bs);
    glVertex3f(0.5,2,-7);
    glVertex3f(0.5,2,-11);
    glVertex3f(0,9.5,-12);
    glVertex3f(0,9.5,-10);
	glEnd();
    //Side B
	glBegin(GL_POLYGON);
    glColor3f(rs,gs,bs);
    glVertex3f(0,9.5,-10);
    glVertex3f(0,9.5,-12);
    glVertex3f(-0.5,2,-11);
    glVertex3f(-0.5,2,-7);
	glEnd();
}
void draw_wing(int Colour)
{
    //Left mini wing
	glPushMatrix();
	glScalef(0.4,0.4,0.4);
	glTranslatef(0,3,-25);
	glRotated(blade++,0,0,1);
	wing(Colour);
	glPopMatrix();
	//Right mini wing
	glPushMatrix();
	glScalef(-0.4,-0.4,0.4);
	glTranslatef(0,-3,-25);
	glRotated(blade++,0,0,1);
	wing(Colour);
	glPopMatrix();
}
void draw_wing1(int Colour)
{
    //Left mini wing
	glPushMatrix();
	glScalef(0.4,0.4,0.4);
	glTranslatef(0,3,-25);
	wing(Colour);
	glPopMatrix();
	//Right mini wing
	glPushMatrix();
	glScalef(-0.4,-0.4,0.4);
	glTranslatef(0,-3,-25);
	wing(Colour);
	glPopMatrix();
}
void plane(int Colour)
{
	float rb=0;
	float gb=0;
	float bb=0;
	color = Colour;
	//Selects which colour plane to display
	if (Colour == 1)
	rb = 0.65;
	else if (Colour == 2)
	gb = 0.65;
    else if (Colour == 3)
	bb = 0.65;
	//Body
	glPushMatrix();
	glTranslatef(0,0,4);
	glScaled(1,0.8,5);
	sphere(rb,gb,bb,1);
	glPopMatrix();
    //Left Wing
	wing(Colour);
	//Right Wing
	glPushMatrix();
	glScalef(-1,-1,1);
	wing(Colour);
	glPopMatrix();
	//wing on left wing
	glPushMatrix();
    glScalef(-0.5,-0.5,-0.5);
    glTranslatef(40,0.05,4);
    draw_wing(color);
    glPopMatrix();
    //wing on riht wing
    glPushMatrix();
    glScalef(-0.5,-0.5,-0.5);
    glTranslatef(-40,-0.05,4);
    draw_wing(color);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(0,0,22);
    glScaled(-0.3,-0.3,-0.3);
    draw_wing(color);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(0,0,24);
    glutSolidSphere(1,50,50);
    glColor3f(1.0,1.0,1.0);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(-20,-0.5,3);
    glutSolidSphere(1,50,50);
    glColor3f(1.0,1.0,1.0);
    glPopMatrix();
    glPushMatrix();
    glTranslatef(20,0.5,3);
    glutSolidSphere(1,50,50);
    glColor3f(1.0,1.0,1.0);
    glPopMatrix();
    glPushMatrix();
    glScalef(0.7,0.7,0.7);
    glTranslatef(0,0,35);
    glutSolidTorus(1,5,5,20);
    glPopMatrix();
    //Left mini wing
    draw_wing1(Colour);
    //Fin
	fin(Colour);
}
void plane1(int Colour)
{
	float rb=0;
	float gb=0;
	float bb=0;
	color = Colour;
	//Selects which colour plane to display
	if (Colour == 1)
	rb = 0.65;
    else if (Colour == 2)
	gb = 0.65;
    else if (Colour == 3)
	bb = 0.65;
	//Body
	glPushMatrix();
	glTranslatef(0,0,4);
	glScaled(1,0.8,5);
	sphere(rb,gb,bb,1);
	glPopMatrix();
    //Left Wing
	wing(Colour);
	//Right Wing
	glPushMatrix();
	glScalef(-1,-1,1);
	wing(Colour);
	glPopMatrix();
    draw_wing1(Colour);
    //Fin
	fin(Colour);
}
void draw(void)
{
    GLfloat red, green, blue;
    int i;
    glClear(GL_DEPTH_BUFFER_BIT);
    /* paint black to blue smooth shaded polygon for background */
    glDisable(GL_DEPTH_TEST);
    glShadeModel(GL_SMOOTH);
    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.0, 0.0);
    v3f(-50, 20, -19);
    v3f(20, 20, -19);
    glColor3f(0.0, 0.0, 1.0);
    v3f(20, -20, -19);
    v3f(-20, -20, -19);
    glEnd();
    /* paint planes */
    glEnable(GL_DEPTH_TEST);
    glShadeModel(GL_FLAT);
    for (i = 0; i < MAX_PLANES; i++)
    if (planes[i].speed != 0.0)
    {
        glPushMatrix();
        glTranslatef(planes[i].x, planes[i].y, planes[i].z);
        glRotatef(290.0, 1.0, 0.0, 0.0);
        glRotatef(planes[i].angle, 1.0, 0.0, 0.0);
        glScalef(0.1,0.1,0.1);
        glTranslatef(10.0, -50.0, 20.0);
        plane(1);
        glPopMatrix();
        glPushMatrix();
        glTranslatef(planes[i].x, planes[i].y, planes[i].z);
        glRotatef(290.0, 1.0, 0.0, 0.0);
        glRotatef(planes[i].angle, 1.0, 0.0, 0.0);
        glScalef(0.05,0.05,0.05);
        glTranslatef(-25.0, 25.0, -10.0);
        plane1(2);
        glPopMatrix();
        glPopMatrix();
    }
    glutSwapBuffers();
}
void tick_per_plane(int i)
{
    float theta = planes[i].theta += planes[i].speed;
    planes[i].z = -9 + 4 * cos(theta);
    planes[i].x = 4 * sin(2 * theta);
    planes[i].y = sin(theta / 3.4) * 3;
    planes[i].angle = ((atan(2.0) + M_PI_2) * sin(theta) - M_PI_2) * 180 / M_PI;
    if (planes[i].speed < 0.0)
    planes[i].angle += 180;
}
void add_plane(void)
{
    int i;
    for (i = 0; i < MAX_PLANES; i++)
    if (planes[i].speed == 0)
    {
        #define SET_COLOR(r,g,b)\
        planes[i].red=r; planes[i].green=g; planes[i].blue=b;
        switch (random() % 6)
        {
            case 0: SET_COLOR(1.0, 0.0, 0.0);  /* red */
                    break;
            case 1: SET_COLOR(1.0, 1.0, 1.0);  /* white */
                    break;
            case 2: SET_COLOR(0.0, 1.0, 0.0);  /* green */
                    break;
            case 3: SET_COLOR(1.0, 0.0, 1.0);  /* magenta */
                    break;
            case 4: SET_COLOR(1.0, 1.0, 0.0);  /* yellow */
                    break;
            case 5: SET_COLOR(0.0, 1.0, 1.0);  /* cyan */
                    break;
        }
        planes[i].speed = ((float) (random() % 20)) * 0.001 + 0.02;
        if (random() & 0x1)
        planes[i].speed *= -1;
        planes[i].theta = ((float) (random() % 257)) * 0.1111;
        tick_per_plane(i);
        if (!moving)
        glutPostRedisplay();
        return;
    }
}
void remove_plane(void)
{
    int i;
    for (i = MAX_PLANES - 1; i >= 0; i--)
    if (planes[i].speed != 0)
    {
        planes[i].speed = 0;
        if(!moving)
            glutPostRedisplay();
        return;
    }
}
void tick(void)
{
    int i;
    for (i = 0; i < MAX_PLANES; i++)
    if (planes[i].speed != 0.0)
        tick_per_plane(i);

}
void animate(void)
{
    tick();
    glutPostRedisplay();
}
void visible(int state)
{
    if (state == GLUT_VISIBLE)
    {
        if (moving)
        glutIdleFunc(animate);
    }
    else
    {
        if (moving)
        glutIdleFunc(NULL);
    }
}
/* ARGSUSED1 */
void keyboard(unsigned char ch, int x, int y)
{
    switch (ch)
    {
        case ' ':   if (!moving)
                    {
                        tick();
                        glutPostRedisplay();
                    }
                    break;
        case 27:    exit(0);  /* ESC */
                    break;
    }
}
void myIdle()
{
    if(blade==360)
        blade=0;
    ii = ii + 0.001;
    if(ii >= 1000)
    {
        //keyboard(' ', 0 , 0);
        draw_wing(color);
        ii = 0;
        draw();
    }
}

#define ADD_PLANE	1
#define REMOVE_PLANE	2
#define MOTION_ON	3
#define MOTION_OFF	4
#define QUIT	5

void menu(int item)
{
    switch (item)
    {
        case ADD_PLANE: add_plane();
                        break;
        case REMOVE_PLANE:  remove_plane();
                            break;
        case MOTION_ON: moving = GL_TRUE;
                        glutChangeToMenuEntry(3, "Motion off", MOTION_OFF);
                        glutIdleFunc(animate);
                        break;
        case MOTION_OFF:    moving = GL_FALSE;
                            glutChangeToMenuEntry(3, "Motion", MOTION_ON);
                            glutIdleFunc(NULL);
                            break;
        case QUIT:  exit(0);
                    break;
    }
}
int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH | GLUT_MULTISAMPLE);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(300,0);
    glutCreateWindow("glutplane");
    glutDisplayFunc(draw);
    glutKeyboardFunc(keyboard);
    glutVisibilityFunc(visible);
    glutCreateMenu(menu);
    glutAddMenuEntry("Add plane", ADD_PLANE);
    glutAddMenuEntry("Remove plane", REMOVE_PLANE);
    glutAddMenuEntry("Motion", MOTION_ON);
    glutAddMenuEntry("Quit", QUIT);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glClearDepth(1.0);
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glFrustum(-1.0, 1.0, -1.0, 1.0, 1.0, 20);
    glMatrixMode(GL_MODELVIEW);
    glutIdleFunc(myIdle);
    add_plane();
    glutMainLoop();
    return 0;
}
